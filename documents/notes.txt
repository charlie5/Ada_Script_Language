_______
General
~~~~~~~

- The 'compiler' translates ASL to Ada, which can then be built with any Ada 2022 compiler.
- A scripts launcher will translate the ASL code into Ada, build the executable (if required) and then run the executable.
- ASL will be able to 'with' any Ada package.
- An Ada package will be able to 'with' the translated Ada code of any ASL package.
- Favour 'ease of use' over 'performance' (as with most script languages).
- Uses 'Object.operation' notation.
- Except where noted all else is normal Ada code (ie loops, conditionals, tasks, protected types, generics, exceptions, etc).




_____
Types
~~~~~

Core:
- Character    => 'standard.Character'.
- String       => 'standard.String'.

- Glyph        => 'standard.Character'.
- Text         => 'lace.Text'.

- wide_Glyph   => 'standard.wide_Character'.
- wide_Text    => 'lace.wide_Text'.

- Integer      => 'standard.Integer'.
- Natural      => 'standard.Natural'.
- Positive     => 'standard.Positive'.

- Float        => 'standard.Float'.
- Real         => 'standard.long_Float'.

- Enumeration  => Direct Ada equivalent.
- Boolean      => Direct Ada equivalent.
- Record       => Direct Ada equivalent.
- User defined => Direct Ada equivalent.



Classes:
- Active and passive ?
- 
- 


__________
Containers
~~~~~~~~~~

Arrays:
- Vector or indefinite vector of a core type.
- Automatically available w/o need for instantiation.
- Uses 'my_Vector [Index]' syntax for accessing array members.
- Named by appending an 's' to the discrete type name (Characters, Strings, Integers, etc).


Vectors:
-
-
-


Stacks:
-
-
-


Lists:
-
-
-


Trees:
-
-
-


Sets:
-
-
-


Maps:
- Map or indefinite map of a core type.
- Automatically available w/o need for instantiation.
- Uses 'my_Map [Key]' syntax for accessing members.
- Named by appending a '_Map' to the discrete type name (Character_Map, Integer_Map, my_Record_Map, etc).
- Map 'Keys' can be of any type (which are converted to an Ada 'String', via the 'Image attribute).




_________
Variables
~~~~~~~~~

- Identifier : <type_Qualifier> Type <:= Initialiser>;
- Type qualifiers:
    - 'constant'  ~ As per Ada.
    - 'persist'   ~ Values are retained across runs.
    - 'access'    ~ As per Ada.
    - 'safe'      ~ Implemented as atomic or protected types.
    



_____
Tasks
~~~~~

- Identical to Ada tasking.
-
-



____
Jobs
~~~~

- Job.Manager.perform;
-
-




______
Events
~~~~~~

- Observer.respond;
- Event.emit;
- Instant and deferred/safe observers.




_________________
Compilation Units
~~~~~~~~~~~~~~~~~

- Applet: 'hello.applet'

-   Can have typed parameters, initialised via 'ada.command_Line'.

-   open:    Initialisation code. Optional.

-   do: Main loop iteration code.
-     'end when <condition>;'   ~   Can appear anywhere and several times in the 'do' region.
                                ~   If no 'end when' is present, the 'do' code is executed once only.
                                
-     Each iteration calls "job_Manager.perform".
-     Each iteration calls "Observer.respond" for deferred event responses.

-   close:   Termination code. Optional.


- Uses a package named '<applet_name>_applet.ads' which contains all the declarations and code.
- The package contains the 'open:' code in the package elaboration region and a 'closure' controlled type for 'close:'.
- Launcher simply 'with's the package and calls 'launch' procedure.


- Example:
-
   applet Hello
   is
      Age : Natural := 1;
   
   begin
      open
      is
         X : Integer := 1;
      begin
         X := X + 1;
      exception
         when constraint_Error =>
            null;
      end open;


      do
      is
         Y : Integer := 1;
      begin
         Y := Y + 1;
         until Y > 10;
      exception
         when constraint_Error =>
            null;
      end do;


      close
      is
         Z : Integer := 1;
      begin
         log (Z + Age);
      exception
         when constraint_Error =>
            null;
      end close;


   exception
      when constraint_Error =>
         null;
   end Hello;



- Class:  'animal.spec' & 'animal.body'.
-   Types:         Class related type declarations.
-   Forge:         Constructors and destructors.
-   Attributes:    Class members    (static  and derived).
-   Operations:    Class operations (virtual and class-wide).
-   Others:        Utility subprograms.
-   open:          Translates to the procedural section at the end of an Ada package body. Optional.
-   close:         Translates to the 'Finalise' procedure of a controlled type. Optional.



- Module: 'maths.spec' & 'maths.body.
-   Public:
-   Private:
-   open:          Translates to the procedural section at the end of an Ada package body. Optional.
-   close:         Translates to the 'Finalise' procedure of a controlled type. Optional.



- Package: 'gui.ads' & 'gui.adb'.
-   A regular Ada package.



________
Generics
~~~~~~~~

- As per Ada.




_____
Tools
~~~~~

asl:
- Commands
  - create
  - release
  - develop
  - profile
  - clean
  - move
  - list
  - publish
  - sync

asl2ada:
  - Translates 'asl' source into 'ada' source.




_______
Runtime
~~~~~~~

- Hosted as a Github (?) project.


Asl:
- Rooted at 'asl.module'.
-
-

Ada:
- Rooted at 'asl_ada.ads'.
-
-




___________
Identifiers
~~~~~~~~~~~

- Consist of letters, numbers and underscores.
- Must begin with a letter.
- Are case-insensitive.
- Preferred casing: - Nouns and plurals are capitalised
                    - Verbs, adverbs and adjectives are all lowercase.
                    - Top level namespace and acronym casing are at the users discretion.




__________
Exceptions
~~~~~~~~~~

- May contain data like an Ada 'record'.


Examples:

- Foo : exception
  is
     I : Integer;
     J : Character;
  end Foo;


- raise Foo (I =>  5,
             J => 'x');


- exception
     when Foo =>
        if     Foo.I = 5
           and Foo.J = ' '
        then
           <statements>;
        end if;



- Bar : exception
  is
     Date : ada.Calendar.Time;
  end Bar;


- raise Bar (Date => ada.Calendar.Clock);


- exception
     when Bar =>
        if Year (Bar.Date) >= 2000 
        then
           <statements>
        end if;




_____
Loops
~~~~~

- 'skip when <condition>' ~ Equivalent to C's 'continue'.




____
Misc
~~~~

- Comment token is '--'.
- '~=' is used to denote case insensitive equality for Text and Strings.
- Swap assignment:   A, B, C := C, A, B;
- Parameterised 'Image attributes.
- Redefine access types images using 'put_Image' to give the image of the de-referenced object.




_____________
Introspection
~~~~~~~~~~~~~

- How to provide introspection ?
-
-




______
Remote
~~~~~~

- How to incorporate DSA ?
-
-




______
aslIde
~~~~~~

- Project manager.
- Source editor.
- Debugger.
- Profiler.




__________
Versioning
~~~~~~~~~~

- Official libraries will not be versioned.
- Each new release of ASL will not be published until all official libraries are consistent.




__________________
Official Libraries
~~~~~~~~~~~~~~~~~~

- asl.Web
- asl.OS
- asl.GUI
- asl.Math
- asl.?



___________
Persistence
~~~~~~~~~~~
- Levels:
     - Local  (in folder which program is run from).
     - User   (in users home folder).
     - System (in /var/asl/<applet_name>).
     
     
     
___
GUI
~~~
- Use interfaces implement by imgui ?



______________
GPU Processing
~~~~~~~~~~~~~~
- Using openGL or Vulkan or openCL ?
- ASL generates openGL shaders from ASL source code.
- How to specify GPU code ?
