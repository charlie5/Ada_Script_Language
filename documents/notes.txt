_______
General
~~~~~~~

- The compiler translates ASL to Ada, which can then be built with any Ada 2022 compiler.
- A scripts launcher will translate the ASL code into Ada, build the executable (if required) and then run the executable.
- ASL will be able to 'with' any Ada package.
- An Ada package will be able to 'with' the translated Ada code of any ASL package.
- Favour 'ease of use' over 'performance' (as with most script languages).
- Uses 'Object.operation' notation.
- Except where noted all else is normal Ada code (ie loops, conditionals, tasks, protected types, generics, exceptions, etc).



_____
Types
~~~~~

Core:
- Glyph        => 'standard.wide_Character'.
- Text         => 'lace.Text'.
- Integer      => 'standard.long_Integer'.
- Natural      => 'standard.long_Natural'.
- Positive     => 'standard.long_Positive'.
- Real         => 'standard.long_Float'.
- Enumeration  => Direct Ada equivalent.
- Boolean      => Direct Ada equivalent.
- Record       => Direct Ada equivalent.
- User defined => Direct Ada equivalent.


Arrays:
- Vector or indefinite vector of a core type.
- Automatically available w/o need for instantiation.
- Uses 'my_Vector [Index]' syntax for accessing array members.
- Named by appending an 's' to the discrete type name (Characters, Strings, Integers, etc).


Maps:
- Map or indefinite map of a core type.
- Automatically available w/o need for instantiation.
- Uses 'my_Map [Key]' syntax for accessing members.
- Named by appending a '_Map' to the discrete type name (Character_Map, Integer_Map, my_Record_Map, etc).
- Map 'Keys' can be of any type (which are converted to an Ada 'wide_String', via the 'Image attribute).


Classes:
- Active and passive ?
- 
- 


_________
Variables
~~~~~~~~~

- Identifier : <type_Qualifier> Type < := Initialiser> ;
- Type qualifiers:
    - 'constant'
    - 'persist'
    - 'access'
    

_____
Tasks
~~~~~

- Identical to Ada tasking.
-
-


____
Jobs
~~~~

- Job.Manager.perform;
-
-



______
Events
~~~~~~

- Observer.respond;
- Event.emit;
- Instant and deferred/safe observers.



_________________
Compilation Units
~~~~~~~~~~~~~~~~~

- Applet: 'hello.applet'

-   State:   Define applet variables, constants and tasks.

-   Open:    Initialisation code.

-   Do: Main loop iteration code.
-     'end when <condition>;'   ~   Can appear anywhere and several times in the evolve code.
                                ~   If no 'end when' is present, the 'Evolve' code is executed once ony.
                                
-     Each iteration calls "job_Manager.perform".
-     Each iteration calls "Observer.respond" for deferred event responses.

-   Close:   Termination code.



- Module: 'maths.module'
-   Public:
-   Hidden:
-   Private:



- Class:  'animal.class'
-   Forge:
-   Attributes:
-   Operations:



________
Generics
~~~~~~~~

- As per Ada.



_____
Tools
~~~~~

asl:
- Commands
  - create
  - release
  - develop
  - profile
  - clean
  - move
  - list
  - publish
  - sync

asl2ada:
  - Translates 'asl' source to 'ada' source.



_______
Runtime
~~~~~~~

Asl:
- Rooted at 'asl.mod'.
-
-

Ada:
- Rooted at 'asl_ada.ads'.
-
-



___________
Identifiers
~~~~~~~~~~~

- Consist of letters, numbers and underscores.
- Must begin with a letter.
- Are case-insensitive.




__________
Exceptions
~~~~~~~~~~

- May contain data like an Ada 'record'.
- Use an Ada exception and render the record data as the exceptions message string using JSON.
- In the handler, create the error record and initialise it by parsing the JSON.

Example:

- error Foo
  is
     I : Integer;
  end error;


- raise Foo (I => 5);


- exception
     when Foo =>
        if Foo.I = 5
        then
           <action>;
        end if;





____
Misc
~~~~

- Comment token is '--'.
